// Copyright 2020-2022, Collabora, Ltd.
// SPDX-License-Identifier: BSL-1.0
import groovy.xml.XmlUtil

plugins {
    id 'com.android.application'
    id 'kotlin-android'

    id 'com.mikepenz.aboutlibraries.plugin'

    id "com.gladed.androidgitversion"
    id "de.undercouch.download"

    // Hilt dependency injection
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'

    // Use spotless to format Java and Kotlin code
    id 'com.diffplug.spotless'
}

spotless {
    java {
        target 'src/main/java/**/*.java'
        // apply a specific flavor of google-java-format.
        googleJavaFormat('1.18.1').aosp().reflowLongStrings()
        // fix formatting of type annotations.
        formatAnnotations()
    }

    kotlin {
        target 'src/main/java/**/*.kt'
        // Use ktfmt(https://github.com/facebook/ktfmt) as the default Kotlin formatter.
        ktfmt('0.43').kotlinlangStyle()
    }
}

androidGitVersion {
    tagPattern(/^v[0-9]+.*/)
    codeFormat = 'MMNPBBBBB'
    format = '%tag%%-count%%-gcommit%%-dirty%'
}

def parseOpenXRVersion(def fn) {
    def matches = file(fn).readLines().find {
        it.contains('XR_CURRENT_API_VERSION')
    } =~ ~/XR_MAKE_VERSION\(([^)]+)\)/
    def components = matches[0][1].split(',').collect { it.replace(' ', '').trim() }
    String.join('.', components)
}

project.ext.renameLicense = { String name ->
    def lowerNoExtension = name.toLowerCase().replace(".txt", "")
    def result = lowerNoExtension.replaceAll(~/[\-.]/, "_") + ".txt"
    return result
}

project.ext.filterLicense = { String line ->
    if (line.trim().isEmpty()) {
        return '<br /><br />'
    } else {
        return XmlUtil.escapeXml(line)
    }
}

project.ext.licenseDir = new File(project.buildDir, 'generated/licenses/main/res/raw')

tasks.register('copyLicenses', Copy) {
    from "${rootDir}/LICENSES/"
    include 'BSL-1.0.txt'
    rename(renameLicense)
    into project.licenseDir
    filter(filterLicense)
}

// Grab Eigen if we can't find it on the system.
tasks.register('downloadEigen', Download) {
    src "https://gitlab.com/libeigen/eigen/-/archive/${project.eigenFetchVersion}/eigen-${project.eigenFetchVersion}.tar.gz"
    dest new File(project.buildDir, "intermediates/eigenDownload/eigen-${project.eigenFetchVersion}.tar.gz")
}

def eigenUnpackDir = new File(project.buildDir, 'intermediates/eigen')
tasks.register('unpackEigen', Copy) {
    dependsOn downloadEigen
    from tarTree(downloadEigen.dest)
    into eigenUnpackDir
}

if (!(new File(project.file(project.eigenIncludeDir), "Eigen/Core")).exists()) {
    println "project.eigenIncludeDir not set or not valid, so downloading Eigen at build time"
    project.ext.eigenIncludeDir = "${eigenUnpackDir}/eigen-${project.eigenFetchVersion}"
} else {
    println "Using Eigen as specified/detected in project.eigenIncludeDir: ${project.eigenIncludeDir}"
    downloadEigen.enabled = false
    unpackEigen.enabled = false
}

// Pass -PsharedStl=true on the gradle command line to build with the shared runtime library.
// This has potential compatibility issues and should only be used if you're consuming another
// library that exposes a C++ interface.
project.ext.stl = "c++_static"
if (project.hasProperty("sharedStl") && project.getProperty("sharedStl")) {
    project.ext.stl = "c++_shared"
    println "Using SHARED C++ standard library"
}

android {
    compileSdk project.sharedCompileSdk
    buildToolsVersion = buildToolsVersion

    ndkVersion "${ndk_version}"

    defaultConfig {
        applicationId 'org.freedesktop.monado.openxr_runtime'
        minSdkVersion project.sharedMinSdk
        targetSdkVersion project.sharedTargetSdk

        versionCode androidGitVersion.code()
        versionName androidGitVersion.name()

        println versionName

        resValue "string", "monado_lib_version", "${versionName}"

        resValue "string", "library_openxrheaders_libraryVersion", parseOpenXRVersion("${rootDir}/src/external/openxr_includes/openxr/openxr.h")

        externalNativeBuild {
            cmake {
                arguments "-DEIGEN3_INCLUDE_DIR=${project.eigenIncludeDir}",
                    "-DANDROID_PLATFORM=${project.sharedMinSdk}",
                    "-DANDROID_STL=${project.stl}",
                    "-DANDROID_ARM_NEON=TRUE"

            }
            if (project.pythonBinary != null) {
                println "Path to Python 3 explicitly specified: ${project.pythonBinary}"
                cmake.arguments "-DPYTHON_EXECUTABLE=${project.pythonBinary}"
            }
        }

        // Be sure to copy over licenses formatted as required.
        preBuild.dependsOn(copyLicenses)

        // We also need the unpacked Eigen
        preBuild.dependsOn(unpackEigen)
    }

    buildTypes {
        release {
            minifyEnabled false
            // Gradle plugin produces proguard-android-optimize.txt from @Keep annotations
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    externalNativeBuild {
        cmake {
            path "${rootDir}/CMakeLists.txt"
        }
    }

    flavorDimensions = ['deployment']
    productFlavors {
        inProcess {
            dimension 'deployment'
            applicationIdSuffix '.in_process'
            externalNativeBuild.cmake.arguments += "-DXRT_FEATURE_SERVICE=OFF"
            externalNativeBuild.cmake.targets "openxr_monado"

            buildConfigField "boolean", "inProcess", "true"
            resValue "string", "app_name", "Monado In Process (Debugging)"
        }
        outOfProcess {
            dimension 'deployment'
            applicationIdSuffix '.out_of_process'
            externalNativeBuild.cmake.arguments += "-DXRT_FEATURE_SERVICE=ON"
            externalNativeBuild.cmake.targets "openxr_monado", "monado-service"

            buildConfigField "boolean", "inProcess", "false"
            resValue "string", "app_name", "Monado XR"
        }
    }
    hilt {
        enableAggregatingTask = true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    packagingOptions {
        resources {
            excludes += ['META-INF/*.kotlin_module']
        }
        jniLibs {
            useLegacyPackaging true
        }
    }
    namespace 'org.freedesktop.monado.openxr_runtime'
    lint {
        fatal 'StopShip'
    }

}

aboutLibraries {
    // Full license text for license IDs mentioned here
    // will be included, even if no detected dependency uses them.
    additionalLicenses {
        mit
        mpl_2_0
        bsl_1_0
    }
}

dependencies {
    outOfProcessImplementation project(':src:xrt:ipc:android')
    implementation project(':src:xrt:auxiliary:android')
    implementation project(':src:xrt:targets:android_common')
    implementation "androidx.appcompat:appcompat:$androidxAppCompatVersion"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    implementation "androidx.constraintlayout:constraintlayout:$androidxConstraintLayoutVersion"
    implementation "com.google.android.material:material:$materialVersion"

    // Dependencies related only to AboutLibraries
    implementation "com.mikepenz:aboutlibraries-core:${latestAboutLibsRelease}"
    implementation "com.mikepenz:aboutlibraries:${latestAboutLibsRelease}"
    implementation "androidx.cardview:cardview:$androidxCardViewVersion"
    implementation "androidx.recyclerview:recyclerview:$androidxRecyclerViewVersion"


    // for Hilt dependency injection
    implementation "com.google.dagger:hilt-android:$hiltVersion"
    kapt "com.google.dagger:hilt-compiler:$hiltVersion"

}
